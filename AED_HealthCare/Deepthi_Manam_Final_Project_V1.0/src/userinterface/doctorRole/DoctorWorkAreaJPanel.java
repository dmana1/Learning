/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.doctorRole;

import business.HealthCareSystem;
import business.enterprise.Enterprise;
import business.enterprise.HospitalEnterprise;
import business.organization.Organization;
import business.organization.PatientManagerOrganization;
import business.patient.Patient;
import business.patient.adverseevents.AdverseEvent;
import business.patient.allergy.Allergy;
import business.patient.encounter.Encounter;
import business.patient.labtest.LabTest;
import business.useraccount.UserAccount;
import business.validation.ValidationUtil;
import business.workqueue.PatientHistoryRequest;
import business.workqueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Deepthi
 */
public class DoctorWorkAreaJPanel extends javax.swing.JPanel {
    
    private HealthCareSystem system;
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private Organization organization;
    private UserAccount userAccount;
    

    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public DoctorWorkAreaJPanel(HealthCareSystem system,JPanel userProcessContainer, Enterprise enterprise, Organization organization, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.organization = organization;
        this.userAccount = userAccount;
        this.system = system;
        newsJTextArea.append(system.getNews());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        newsJTextArea = new javax.swing.JTextArea();
        processAdverseEventsJButton = new javax.swing.JButton();
        resetPasswordJButton = new javax.swing.JButton();
        openAppointmentsJButton = new javax.swing.JButton();
        viewPatientJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        updatePersonalInfoJButton = new javax.swing.JButton();
        emergencyJButton = new javax.swing.JButton();
        viewEmergencyRequestJButton = new javax.swing.JButton();
        reportAdverseEventJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setText("Doctor Work Area");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("News");

        newsJTextArea.setBackground(new java.awt.Color(215, 212, 212));
        newsJTextArea.setColumns(20);
        newsJTextArea.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        newsJTextArea.setLineWrap(true);
        newsJTextArea.setRows(5);
        newsJTextArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(newsJTextArea);

        processAdverseEventsJButton.setBackground(new java.awt.Color(137, 185, 239));
        processAdverseEventsJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        processAdverseEventsJButton.setText("Process Adverse Events >>");
        processAdverseEventsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processAdverseEventsJButtonActionPerformed(evt);
            }
        });

        resetPasswordJButton.setBackground(new java.awt.Color(137, 185, 239));
        resetPasswordJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        resetPasswordJButton.setText("Reset Password >>");
        resetPasswordJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetPasswordJButtonActionPerformed(evt);
            }
        });

        openAppointmentsJButton.setBackground(new java.awt.Color(137, 185, 239));
        openAppointmentsJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        openAppointmentsJButton.setText("Open Appointments >>");
        openAppointmentsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openAppointmentsJButtonActionPerformed(evt);
            }
        });

        viewPatientJButton.setBackground(new java.awt.Color(156, 198, 250));
        viewPatientJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        viewPatientJButton.setText("View Patient History >>");
        viewPatientJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPatientJButtonActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/doctorRole/doctorImage.jpg"))); // NOI18N

        updatePersonalInfoJButton.setBackground(new java.awt.Color(137, 185, 239));
        updatePersonalInfoJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        updatePersonalInfoJButton.setText("Update Personal Information >>");
        updatePersonalInfoJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePersonalInfoJButtonActionPerformed(evt);
            }
        });

        emergencyJButton.setBackground(new java.awt.Color(137, 185, 239));
        emergencyJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        emergencyJButton.setText("Emergency Search Of Patients");
        emergencyJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emergencyJButtonActionPerformed(evt);
            }
        });

        viewEmergencyRequestJButton.setBackground(new java.awt.Color(137, 185, 239));
        viewEmergencyRequestJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        viewEmergencyRequestJButton.setText("View Emergency Patient History >>");
        viewEmergencyRequestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEmergencyRequestJButtonActionPerformed(evt);
            }
        });

        reportAdverseEventJButton.setBackground(new java.awt.Color(137, 185, 239));
        reportAdverseEventJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        reportAdverseEventJButton.setText("Report An Adverse Event >>");
        reportAdverseEventJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportAdverseEventJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(reportAdverseEventJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(updatePersonalInfoJButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(viewPatientJButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(openAppointmentsJButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(resetPasswordJButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                                        .addComponent(emergencyJButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(viewEmergencyRequestJButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(processAdverseEventsJButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 245, Short.MAX_VALUE)
                                .addComponent(jLabel3))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(594, 594, 594)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(309, 309, 309))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(openAppointmentsJButton)
                        .addGap(28, 28, 28)
                        .addComponent(viewPatientJButton)
                        .addGap(33, 33, 33)
                        .addComponent(emergencyJButton)
                        .addGap(33, 33, 33)
                        .addComponent(viewEmergencyRequestJButton)
                        .addGap(31, 31, 31)
                        .addComponent(reportAdverseEventJButton)))
                .addGap(7, 7, 7)
                .addComponent(processAdverseEventsJButton)
                .addGap(27, 27, 27)
                .addComponent(updatePersonalInfoJButton)
                .addGap(33, 33, 33)
                .addComponent(resetPasswordJButton)
                .addContainerGap(63, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void openAppointmentsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openAppointmentsJButtonActionPerformed
        // TODO add your handling code here:
        AppointmentsJPanel panel = new AppointmentsJPanel(system,userProcessContainer, enterprise, organization, userAccount);
        userProcessContainer.add("AppointmentsJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_openAppointmentsJButtonActionPerformed

    private void viewPatientJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPatientJButtonActionPerformed
        // TODO add your handling code here:  
        //check if there is no request at all
        if(HealthCareSystem.workRequestId == 0){
            return;
        }
        
        //check all the hospital whether the request is processed or not.
        Patient patient = null;
        int noOfHospitalsProcessed = system.getAllHospitals().size();
        
        String uniqueCodeOfPatient = null;
        ArrayList<Encounter> encounterList = new ArrayList<Encounter>();
        ArrayList<Allergy> allergyList = new ArrayList<Allergy>();
        ArrayList<AdverseEvent> adverseList = new ArrayList<AdverseEvent>();
        ArrayList<LabTest> labList = new ArrayList<LabTest>();
        for(HospitalEnterprise enterprise : system.getAllHospitals()){
            for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList()){
                if(org instanceof PatientManagerOrganization){
                    for(WorkRequest wr : org.getWorkQueue().getWorkRequestList()){
                        PatientHistoryRequest pr = (PatientHistoryRequest)wr;
                        if(pr.getRequestNo() == HealthCareSystem.workRequestId){
                            if(pr.getStatus().equals("Completed") ){
                                noOfHospitalsProcessed--;
                                uniqueCodeOfPatient = pr.getPatientUniqueCode();
                                if (pr.getPatientFoundResult().equals("Found")) {
                                    for (Encounter e : pr.getEncounterHistory().getEncounterList()) {
                                        encounterList.add(e);                                       
                                    }
                                    for(Allergy allergy : pr.getAllergyList() ){
                                        allergyList.add(allergy);
                                    }
                                    for(AdverseEvent adverseEvent : pr.getAdverseList()){
                                        adverseList.add(adverseEvent);
                                    }
                                    for(LabTest labTest : pr.getLabTestList()){
                                        labList.add(labTest);
                                    }
                                }
                            }

                        }
                        
                    }
                }
            }
        }
        //if there is only one hospital
        if(system.getAllHospitals().size() == 1){
            Patient p = null;
            for(Patient p1 : ((HospitalEnterprise)enterprise).getPatientDirectory().getPatientsList()){
                String uniqueCodeTemp = ValidationUtil.generateUniqueCode(p1.getFirstName(), p1.getLastName(), p1.getSsn(), p1.getDateOfBirth());
                if(uniqueCodeTemp.equals(HealthCareSystem.uniqueCode) ){
                    p = p1;
                }
            }
           ViewPatientHistoryJPanel panel = new ViewPatientHistoryJPanel(system, userProcessContainer, enterprise, organization, userAccount, p, encounterList,allergyList,adverseList,labList, HealthCareSystem.workRequestId);
                    userProcessContainer.add("ViewPatientHistoryJPanel", panel);
                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                    layout.next(userProcessContainer); 
        }
        
        //Check whether processing is done in all hospitals
        if (noOfHospitalsProcessed != 1) {
            //check whether doctor want to proceed,without waiting for response from other hospitals
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Request is pending from other hospitals, Do you like to continue without waiting for all responses?", "Warning", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                //if doctor wants to proceed,after processing of some hospitals
               
                    patient = getPatientByWorkRequestId(HealthCareSystem.workRequestId);
                    //add the patient history of current hospital
                    for (Encounter encounter : patient.getEncounterHistory().getEncounterList()) {
                        encounterList.add(encounter);
                    }
                    //add allergy to the allergy list
                    for(Allergy allergy : patient.getAllergyList()){
                        allergyList.add(allergy);
                    }
                    //add the adverse event list
                    for(AdverseEvent adverseEvent : patient.getAdverseEventHistory().getAdverseEventList()){
                        adverseList.add(adverseEvent);
                    }
                    //add the lab test list
                    for(LabTest labTest : patient.getLabTestList()){
                        labList.add(labTest);
                    }
                    
                    ViewPatientHistoryJPanel panel = new ViewPatientHistoryJPanel(system, userProcessContainer, enterprise, organization, userAccount, patient, encounterList,allergyList,adverseList,labList,HealthCareSystem.workRequestId);
                    userProcessContainer.add("ViewPatientHistoryJPanel", panel);
                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                    layout.next(userProcessContainer);
                

            }
            if (dialogResult == JOptionPane.NO_OPTION) {
                //JOptionPane.showMessageDialog(null, "Request is pending from other hospitals, Do you like to continue without waiting for all hospitals?");
                return;
            }
        } else {
            if (uniqueCodeOfPatient != null) {
                patient = getPatientByUniqueCode(uniqueCodeOfPatient);
                //add the patient history of current hospital
                for (Encounter encounter : patient.getEncounterHistory().getEncounterList()) {
                    encounterList.add(encounter);
                }
                for(Allergy allergy : patient.getAllergyList()){
                    allergyList.add(allergy);
                }
                for(AdverseEvent adverseEvent : patient.getAdverseEventHistory().getAdverseEventList()){
                    adverseList.add(adverseEvent);
                }
                for(LabTest labTest : patient.getLabTestList()){
                    labList.add(labTest);
                }
                ViewPatientHistoryJPanel panel = new ViewPatientHistoryJPanel(system, userProcessContainer, enterprise, organization, userAccount, patient, encounterList,allergyList,adverseList,labList,HealthCareSystem.workRequestId);
                userProcessContainer.add("ViewPatientHistoryJPanel", panel);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
            }
        }


    }//GEN-LAST:event_viewPatientJButtonActionPerformed

    private void resetPasswordJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetPasswordJButtonActionPerformed
        // TODO add your handling code here:
         ResetPasswordDoctorJPanel panel = new ResetPasswordDoctorJPanel(userProcessContainer, enterprise, organization, userAccount);
        userProcessContainer.add("AppointmentsJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_resetPasswordJButtonActionPerformed

    private void updatePersonalInfoJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePersonalInfoJButtonActionPerformed
        // TODO add your handling code here:
         UpdatePersonalInformationJPanel panel = new UpdatePersonalInformationJPanel(userProcessContainer, enterprise, organization, userAccount);
        userProcessContainer.add("UpdatePersonalInformationJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_updatePersonalInfoJButtonActionPerformed

    private void processAdverseEventsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processAdverseEventsJButtonActionPerformed
        // TODO add your handling code here:
        ProcessAdverseEventsJPanel panel = new ProcessAdverseEventsJPanel( system, userProcessContainer,  enterprise,  organization,  userAccount);
        userProcessContainer.add("ProcessAdverseEventsJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_processAdverseEventsJButtonActionPerformed

    private void emergencyJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emergencyJButtonActionPerformed
        // TODO add your handling code here:
        EmergencySearchJPanel panel = new EmergencySearchJPanel( system, userProcessContainer,  enterprise,  organization,  userAccount);
        userProcessContainer.add("EmergencySearchJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_emergencyJButtonActionPerformed

    private void viewEmergencyRequestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEmergencyRequestJButtonActionPerformed
        // TODO add your handling code here:
        ViewEmergencyRequestsJPanel panel = new ViewEmergencyRequestsJPanel( system, userProcessContainer,  enterprise,  organization,  userAccount);
        userProcessContainer.add("ViewEmergencyRequestsJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewEmergencyRequestJButtonActionPerformed

    private void reportAdverseEventJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportAdverseEventJButtonActionPerformed
        // TODO add your handling code here:
        AdverseEventJPanel panel = new AdverseEventJPanel( system, userProcessContainer,  enterprise,  organization,  userAccount);
        userProcessContainer.add("AdverseEventJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_reportAdverseEventJButtonActionPerformed

   private Patient getPatientByUniqueCode(String uniqueCodeOfPatient){
       for(Patient patient : ((HospitalEnterprise)enterprise).getPatientDirectory().getPatientsList()){
           String uniqueCodeTemp = ValidationUtil.generateUniqueCode(patient.getFirstName(), patient.getLastName(), patient.getSsn(), patient.getDateOfBirth());
           if(uniqueCodeTemp.equalsIgnoreCase(uniqueCodeOfPatient)){
               return patient;
           }
       }
       return null;
   }
   
   private Patient getPatientByWorkRequestId(int workRequestId){
       for(WorkRequest wr : userAccount.getWorkQueue().getWorkRequestList()){
           if(wr != null && wr instanceof PatientHistoryRequest){
           PatientHistoryRequest pr = (PatientHistoryRequest)wr;
           if(pr.getRequestNo() ==  workRequestId){
                String uniqueCode =  pr.getPatientUniqueCode();
                Patient patient = getPatientByUniqueCode(uniqueCode);
                return patient;
           }
           }
       }
       return null;
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton emergencyJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea newsJTextArea;
    private javax.swing.JButton openAppointmentsJButton;
    private javax.swing.JButton processAdverseEventsJButton;
    private javax.swing.JButton reportAdverseEventJButton;
    private javax.swing.JButton resetPasswordJButton;
    private javax.swing.JButton updatePersonalInfoJButton;
    private javax.swing.JButton viewEmergencyRequestJButton;
    private javax.swing.JButton viewPatientJButton;
    // End of variables declaration//GEN-END:variables
}
