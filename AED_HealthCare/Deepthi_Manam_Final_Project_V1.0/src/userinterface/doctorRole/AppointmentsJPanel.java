/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.doctorRole;

import business.HealthCareSystem;
import business.enterprise.Enterprise;
import business.enterprise.HospitalEnterprise;
import business.organization.Organization;
import business.organization.PatientManagerOrganization;
import business.useraccount.UserAccount;
import business.validation.ValidationUtil;
import business.workqueue.AppointmentRequest;
import business.workqueue.PatientHistoryRequest;
import business.workqueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Font;
import java.util.Date;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Deepthi
 */
public class AppointmentsJPanel extends javax.swing.JPanel {
 private HealthCareSystem system;
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private Organization organization;
    private UserAccount userAccount;
    /**
     * Creates new form AppointmentsJPanel
     */
    public AppointmentsJPanel(HealthCareSystem system,JPanel userProcessContainer, Enterprise enterprise, Organization organization, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.organization = organization;
        this.userAccount = userAccount;
        this.system = system;
        
        populateTable();
    }

    private void populateTable(){
        DefaultTableModel model = (DefaultTableModel)appointmentJTable.getModel();
         model.setRowCount(0);
                 appointmentJTable.getTableHeader().setFont(new Font("Tahoma", Font.PLAIN, 18));

         for(WorkRequest wr : organization.getWorkQueue().getWorkRequestList()){
             if(wr instanceof AppointmentRequest){
             Object[] row = new Object[6];
             row[0] = ((AppointmentRequest)wr);
             row[1] = ((AppointmentRequest)wr).getFirstName();
             row[2] = ((AppointmentRequest)wr).getLastName();
             row[3] = ((AppointmentRequest)wr).getSsn();
             row[4] = ((AppointmentRequest)wr).getDob();
             row[5] = ((AppointmentRequest)wr).getStatus();
             model.addRow(row);
             }
         }
         
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        appointmentJTable = new javax.swing.JTable();
        searchPatientJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        appointmentJTable.setBackground(new java.awt.Color(220, 222, 228));
        appointmentJTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        appointmentJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "AppointMent Date", " First Name", " Last Name", "SSN(Last 4 digits)", "Date Of Birth", "Status"
            }
        ));
        jScrollPane1.setViewportView(appointmentJTable);

        searchPatientJButton.setBackground(new java.awt.Color(137, 185, 239));
        searchPatientJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        searchPatientJButton.setText("Search Patient History");
        searchPatientJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPatientJButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Appointments to Doctor :");

        backJButton.setBackground(new java.awt.Color(137, 185, 239));
        backJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1460, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(550, 550, 550)
                .addComponent(searchPatientJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchPatientJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 180, Short.MAX_VALUE)
                .addComponent(backJButton)
                .addGap(165, 165, 165))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchPatientJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPatientJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = appointmentJTable.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Select the appointment to search");
            return;
        }
        AppointmentRequest apr = (AppointmentRequest) appointmentJTable.getValueAt(selectedRow, 0);
        apr.setStatus("Processing");
        String firstName = (String) appointmentJTable.getValueAt(selectedRow, 1);
        String lastName = (String) appointmentJTable.getValueAt(selectedRow, 2);
        String ssn = (String) appointmentJTable.getValueAt(selectedRow, 3);
        Date dob = (Date) appointmentJTable.getValueAt(selectedRow, 4);


        String uniqueCodeOfPatient = ValidationUtil.generateUniqueCode(firstName, lastName, ssn, dob);
        PatientHistoryRequest wr = null;
         int requestNo =  new Random().nextInt(100);   
               for(HospitalEnterprise hospitalEnterprise : system.getAllHospitals()){
                   
                   for(Organization organization1 : hospitalEnterprise.getOrganizationDirectory().getOrganizationList()){
                       if(organization1 instanceof  PatientManagerOrganization && organization1 != getPatientManagerOrganizationOfHospital(enterprise)){
                            wr = new PatientHistoryRequest();
                           wr.setPatientUniqueCode(uniqueCodeOfPatient);
                           wr.setSender(userAccount);  
                           wr.setSentToHospital(hospitalEnterprise.getName());
                           wr.setRequestNo(requestNo);
                           wr.setMessage("Request for patient details");
                           wr.setStatus("Pending");
                           wr.setSenderEnterprise(enterprise.getName());
                           organization1.getWorkQueue().getWorkRequestList().add(wr);
                           
                          
                       }
                   }
               }
               
               //set the request no at system and the work request to doctor
               HealthCareSystem.workRequestId = requestNo;
               HealthCareSystem.appointmentId = apr.getRequestId();
               HealthCareSystem.uniqueCode = uniqueCodeOfPatient;
               userAccount.getWorkQueue().getWorkRequestList().add(wr);
               
               //refresh the table
               populateTable();
               
        JOptionPane.showMessageDialog(null, "Search request placed.Click on View History to see the details");
    }//GEN-LAST:event_searchPatientJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
            userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private Organization getPatientManagerOrganizationOfHospital(Enterprise enterprise){
        for(Organization org : ((HospitalEnterprise)enterprise).getOrganizationDirectory().getOrganizationList()){
            if( org instanceof PatientManagerOrganization){
                return org;
            }
        }
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable appointmentJTable;
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton searchPatientJButton;
    // End of variables declaration//GEN-END:variables
}
